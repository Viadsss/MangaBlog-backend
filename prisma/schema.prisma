// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user") // owner, admin, user
  createdAt DateTime @default(now())
  
  posts     Post[]
  comments  Comment[]
  likes     Like[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User     @relation(fields: [authorId], references: [id])
  genres    PostGenre[]
  comments  Comment[]
  likes     Like[]
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  
  posts PostGenre[]
}

model PostGenre {
  postId  Int
  genreId Int
  
  post    Post   @relation(fields: [postId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])
  
  @@id([postId, genreId])  // Composite primary key
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  
  post      Post @relation(fields: [postId], references: [id])
  user      User @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  
  post      Post @relation(fields: [postId], references: [id])
  user      User @relation(fields: [userId], references: [id])
  
  @@unique([postId, userId])  // To make sure a user can only like a post once
}
